/**
 * Campus Incident API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fil.eservices.campusincident.data.api;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

import fil.eservices.campusincident.data.ApiException;
import fil.eservices.campusincident.data.ApiInvoker;
import fil.eservices.campusincident.data.Pair;
import fil.eservices.campusincident.data.model.Category;
import fil.eservices.campusincident.data.model.CategoryRenameDto;
import fil.eservices.campusincident.data.model.Location;

public class CategoryControllerApi {
  String basePath = "http://54.38.242.184:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * getAllCategories
   *
   * @param containing containing
   * @return List<Category>
   */
  public List<Category> getAllCategoriesUsingGET (String containing) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'containing' is set
    if (containing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'containing' when calling getAllCategoriesUsingGET",
              new ApiException(400, "Missing the required parameter 'containing' when calling getAllCategoriesUsingGET"));
    }

    // create path and map variables
    String path = "/categories";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "containing", containing));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (List<Category>) ApiInvoker.deserialize(localVarResponse, "array", Category.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * getAllCategories
   *
   * @param containing containing
   */
  public void getAllCategoriesUsingGET (String containing, final Response.Listener<List<Category>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'containing' is set
    if (containing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'containing' when calling getAllCategoriesUsingGET",
              new ApiException(400, "Missing the required parameter 'containing' when calling getAllCategoriesUsingGET"));
    }

    // create path and map variables
    String path = "/categories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "containing", containing));


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
              new Response.Listener<String>() {
                @Override
                public void onResponse(String localVarResponse) {
                  try {
                    responseListener.onResponse((List<Category>) ApiInvoker.deserialize(localVarResponse,  "array", Category.class));
                  } catch (ApiException exception) {
                    errorListener.onErrorResponse(new VolleyError(exception));
                  }
                }
              }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                  errorListener.onErrorResponse(error);
                }
              });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
   * newCategory
   *
   * @param newCat newCat
   * @return Category
   */
  public Category newCategoryUsingPOST (Category newCat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = newCat;
    // verify the required parameter 'newCat' is set
    if (newCat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newCat' when calling newCategoryUsingPOST",
              new ApiException(400, "Missing the required parameter 'newCat' when calling newCategoryUsingPOST"));
    }

    // create path and map variables
    String path = "/categories";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
            "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (Category) ApiInvoker.deserialize(localVarResponse, "", Category.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * newCategory
   *
   * @param newCat newCat
   */
  public void newCategoryUsingPOST (Category newCat, final Response.Listener<Category> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = newCat;

    // verify the required parameter 'newCat' is set
    if (newCat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newCat' when calling newCategoryUsingPOST",
              new ApiException(400, "Missing the required parameter 'newCat' when calling newCategoryUsingPOST"));
    }

    // create path and map variables
    String path = "/categories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
            "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
              new Response.Listener<String>() {
                @Override
                public void onResponse(String localVarResponse) {
                  try {
                    responseListener.onResponse((Category) ApiInvoker.deserialize(localVarResponse,  "", Category.class));
                  } catch (ApiException exception) {
                    errorListener.onErrorResponse(new VolleyError(exception));
                  }
                }
              }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                  errorListener.onErrorResponse(error);
                }
              });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
   * renameCategory
   *
   * @param renaming renaming
   * @return Category
   */
  public Category renameCategoryUsingPOST (CategoryRenameDto renaming) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = renaming;
    // verify the required parameter 'renaming' is set
    if (renaming == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renaming' when calling renameCategoryUsingPOST",
              new ApiException(400, "Missing the required parameter 'renaming' when calling renameCategoryUsingPOST"));
    }

    // create path and map variables
    String path = "/categories/rename";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
            "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (Category) ApiInvoker.deserialize(localVarResponse, "", Category.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * renameCategory
   *
   * @param renaming renaming
   */
  public void renameCategoryUsingPOST (CategoryRenameDto renaming, final Response.Listener<Category> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = renaming;

    // verify the required parameter 'renaming' is set
    if (renaming == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renaming' when calling renameCategoryUsingPOST",
              new ApiException(400, "Missing the required parameter 'renaming' when calling renameCategoryUsingPOST"));
    }

    // create path and map variables
    String path = "/categories/rename".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
            "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
              new Response.Listener<String>() {
                @Override
                public void onResponse(String localVarResponse) {
                  try {
                    responseListener.onResponse((Category) ApiInvoker.deserialize(localVarResponse,  "", Category.class));
                  } catch (ApiException exception) {
                    errorListener.onErrorResponse(new VolleyError(exception));
                  }
                }
              }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                  errorListener.onErrorResponse(error);
                }
              });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
