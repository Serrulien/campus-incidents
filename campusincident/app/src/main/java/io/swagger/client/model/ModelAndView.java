/*
 * Campus Incident API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.View;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ModelAndView
 */


public class ModelAndView {
  @SerializedName("empty")
  private Boolean empty = null;

  @SerializedName("model")
  private Object model = null;

  @SerializedName("modelMap")
  private Map<String, Object> modelMap = null;

  @SerializedName("reference")
  private Boolean reference = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CONTINUE("CONTINUE"),
    SWITCHING_PROTOCOLS("SWITCHING_PROTOCOLS"),
    PROCESSING("PROCESSING"),
    CHECKPOINT("CHECKPOINT"),
    OK("OK"),
    CREATED("CREATED"),
    ACCEPTED("ACCEPTED"),
    NON_AUTHORITATIVE_INFORMATION("NON_AUTHORITATIVE_INFORMATION"),
    NO_CONTENT("NO_CONTENT"),
    RESET_CONTENT("RESET_CONTENT"),
    PARTIAL_CONTENT("PARTIAL_CONTENT"),
    MULTI_STATUS("MULTI_STATUS"),
    ALREADY_REPORTED("ALREADY_REPORTED"),
    IM_USED("IM_USED"),
    MULTIPLE_CHOICES("MULTIPLE_CHOICES"),
    MOVED_PERMANENTLY("MOVED_PERMANENTLY"),
    FOUND("FOUND"),
    MOVED_TEMPORARILY("MOVED_TEMPORARILY"),
    SEE_OTHER("SEE_OTHER"),
    NOT_MODIFIED("NOT_MODIFIED"),
    USE_PROXY("USE_PROXY"),
    TEMPORARY_REDIRECT("TEMPORARY_REDIRECT"),
    PERMANENT_REDIRECT("PERMANENT_REDIRECT"),
    BAD_REQUEST("BAD_REQUEST"),
    UNAUTHORIZED("UNAUTHORIZED"),
    PAYMENT_REQUIRED("PAYMENT_REQUIRED"),
    FORBIDDEN("FORBIDDEN"),
    NOT_FOUND("NOT_FOUND"),
    METHOD_NOT_ALLOWED("METHOD_NOT_ALLOWED"),
    NOT_ACCEPTABLE("NOT_ACCEPTABLE"),
    PROXY_AUTHENTICATION_REQUIRED("PROXY_AUTHENTICATION_REQUIRED"),
    REQUEST_TIMEOUT("REQUEST_TIMEOUT"),
    CONFLICT("CONFLICT"),
    GONE("GONE"),
    LENGTH_REQUIRED("LENGTH_REQUIRED"),
    PRECONDITION_FAILED("PRECONDITION_FAILED"),
    PAYLOAD_TOO_LARGE("PAYLOAD_TOO_LARGE"),
    REQUEST_ENTITY_TOO_LARGE("REQUEST_ENTITY_TOO_LARGE"),
    URI_TOO_LONG("URI_TOO_LONG"),
    REQUEST_URI_TOO_LONG("REQUEST_URI_TOO_LONG"),
    UNSUPPORTED_MEDIA_TYPE("UNSUPPORTED_MEDIA_TYPE"),
    REQUESTED_RANGE_NOT_SATISFIABLE("REQUESTED_RANGE_NOT_SATISFIABLE"),
    EXPECTATION_FAILED("EXPECTATION_FAILED"),
    I_AM_A_TEAPOT("I_AM_A_TEAPOT"),
    INSUFFICIENT_SPACE_ON_RESOURCE("INSUFFICIENT_SPACE_ON_RESOURCE"),
    METHOD_FAILURE("METHOD_FAILURE"),
    DESTINATION_LOCKED("DESTINATION_LOCKED"),
    UNPROCESSABLE_ENTITY("UNPROCESSABLE_ENTITY"),
    LOCKED("LOCKED"),
    FAILED_DEPENDENCY("FAILED_DEPENDENCY"),
    TOO_EARLY("TOO_EARLY"),
    UPGRADE_REQUIRED("UPGRADE_REQUIRED"),
    PRECONDITION_REQUIRED("PRECONDITION_REQUIRED"),
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS"),
    REQUEST_HEADER_FIELDS_TOO_LARGE("REQUEST_HEADER_FIELDS_TOO_LARGE"),
    UNAVAILABLE_FOR_LEGAL_REASONS("UNAVAILABLE_FOR_LEGAL_REASONS"),
    INTERNAL_SERVER_ERROR("INTERNAL_SERVER_ERROR"),
    NOT_IMPLEMENTED("NOT_IMPLEMENTED"),
    BAD_GATEWAY("BAD_GATEWAY"),
    SERVICE_UNAVAILABLE("SERVICE_UNAVAILABLE"),
    GATEWAY_TIMEOUT("GATEWAY_TIMEOUT"),
    HTTP_VERSION_NOT_SUPPORTED("HTTP_VERSION_NOT_SUPPORTED"),
    VARIANT_ALSO_NEGOTIATES("VARIANT_ALSO_NEGOTIATES"),
    INSUFFICIENT_STORAGE("INSUFFICIENT_STORAGE"),
    LOOP_DETECTED("LOOP_DETECTED"),
    BANDWIDTH_LIMIT_EXCEEDED("BANDWIDTH_LIMIT_EXCEEDED"),
    NOT_EXTENDED("NOT_EXTENDED"),
    NETWORK_AUTHENTICATION_REQUIRED("NETWORK_AUTHENTICATION_REQUIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("view")
  private View view = null;

  @SerializedName("viewName")
  private String viewName = null;

  public ModelAndView empty(Boolean empty) {
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @Schema(description = "")
  public Boolean isEmpty() {
    return empty;
  }

  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }

  public ModelAndView model(Object model) {
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @Schema(description = "")
  public Object getModel() {
    return model;
  }

  public void setModel(Object model) {
    this.model = model;
  }

  public ModelAndView modelMap(Map<String, Object> modelMap) {
    this.modelMap = modelMap;
    return this;
  }

  public ModelAndView putModelMapItem(String key, Object modelMapItem) {
    if (this.modelMap == null) {
      this.modelMap = new HashMap<String, Object>();
    }
    this.modelMap.put(key, modelMapItem);
    return this;
  }

   /**
   * Get modelMap
   * @return modelMap
  **/
  @Schema(description = "")
  public Map<String, Object> getModelMap() {
    return modelMap;
  }

  public void setModelMap(Map<String, Object> modelMap) {
    this.modelMap = modelMap;
  }

  public ModelAndView reference(Boolean reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @Schema(description = "")
  public Boolean isReference() {
    return reference;
  }

  public void setReference(Boolean reference) {
    this.reference = reference;
  }

  public ModelAndView status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ModelAndView view(View view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @Schema(description = "")
  public View getView() {
    return view;
  }

  public void setView(View view) {
    this.view = view;
  }

  public ModelAndView viewName(String viewName) {
    this.viewName = viewName;
    return this;
  }

   /**
   * Get viewName
   * @return viewName
  **/
  @Schema(description = "")
  public String getViewName() {
    return viewName;
  }

  public void setViewName(String viewName) {
    this.viewName = viewName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelAndView modelAndView = (ModelAndView) o;
    return Objects.equals(this.empty, modelAndView.empty) &&
        Objects.equals(this.model, modelAndView.model) &&
        Objects.equals(this.modelMap, modelAndView.modelMap) &&
        Objects.equals(this.reference, modelAndView.reference) &&
        Objects.equals(this.status, modelAndView.status) &&
        Objects.equals(this.view, modelAndView.view) &&
        Objects.equals(this.viewName, modelAndView.viewName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(empty, model, modelMap, reference, status, view, viewName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelAndView {\n");
    
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    modelMap: ").append(toIndentedString(modelMap)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
